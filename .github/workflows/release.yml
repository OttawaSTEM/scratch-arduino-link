# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: build
on:
  push:
    branches: [ main ]

jobs:
  release:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        node-version: [14.x]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install

      - name: Windows build
        if: matrix.os == 'windows-latest'
        run: npm run build-win

      - name: Get tag
        uses: oprypin/find-latest-tag@v1
        id: tagName
        with: 
          repository: OttawaSTEM/scratch-arduino-link
          releases-only: true

      - name: Zip exe file to zip for Windows
        if: matrix.os == 'windows-latest'
        uses: papeloto/action-zip@v1
        with:
          files: dist/Scratch-Arduino-Link-Win-${{ steps.tagName.outputs.tag }}.exe
          dest: dist/Scratch-Arduino-Link-Win-${{ steps.tagName.outputs.tag }}.zip

      - name: Cleanup Windows artifacts
        if: matrix.os == 'windows-latest'
        run: npx rimraf "dist/!(*.zip)"

      - name: Mac prebuild
        if: matrix.os == 'macos-latest'
        run: |
          npm install electron-rebuild -D 
          ./node_modules/.bin/electron-rebuild 
          npm uninstall electron-rebuild 

      - name: Mac build
        if: matrix.os == 'macos-latest'
        run: npm run build-mac

      - name: Cleanup Mac OS artifacts
        if: matrix.os == 'macos-latest'
        run: npx rimraf "dist/!(*.dmg)"

      - name: Github Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/Scratch-Arduino-Link-*.*, index.json"
          tag: ${{ steps.tagName.outputs.tag }}
          token: ${{ secrets.TOKEN_GITHUB_SECRET }}
          allowUpdates: true